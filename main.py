from CodeGen import *
import json
import os
import sys
from distutils.dir_util import copy_tree

# TODO: Work on Game Scene
'''
def add_game_scene(scene_name):
    config = {}
    game_states = []
    with open('config.json') as json_data:
        config = json.load(json_data)
        game_states = config['game_states']

    for state in game_states:
        if scene_name == state:
            raise Exception('Scene was already defined')

    game_states.append(scene_name)
    config['game_states'] = game_states

    with open('config.json', 'w') as outfile:
        json.dump(config, outfile)
'''

# TODO: Work On Game Scene
'''
def refresh_game_state():
    config = {}
    game_states = []
    with open('config.json') as json_data:
        config = json.load(json_data)
        game_states = config['game_states']

    cpp = CppFile('GameState.h')
    cpp('/****************************')
    cpp(' ** THIS FILE IS GENERATED **')
    cpp(' ****************************/\n')

    cpp('#ifndef GAME_STATE_H')
    cpp('#define GAME_STATE_H\n')

    index = 0
    for state in game_states:
        with cpp.subs(name=state.upper(), i=index):
            cpp('#define $name$_PRE_SCENE $i$;')
            index += 1
        with cpp.subs(name=state.upper(), i=index):
            cpp('#define $name$_SCENE $i$; \n')
            index += 1
        with cpp.block('void GoTo' + state + '()'):
            cpp('return;')

    cpp('\n#endif')
    cpp.close()
'''

def generate_game_scene(path, scene_name):
    cpp = CppFile(path + scene_name + '.cpp')
    cpp('#ifndef ' + scene_name + '_CPP')
    cpp('#define ' + scene_name + '_CPP')

    cpp('\n#include "ArduEngine/ArduEngine.h"\n')

    cpp('#include "Images.h"\n')

    with cpp.subs(name=scene_name):
        with cpp.block('class $name$ : public ArduScene', ';'):
            cpp.label('public')
            with cpp.block(scene_name + '(ArduEngine &engine)'):
                cpp('logo = new ArduSprite(0, 0, 128, 64, WHITE, arduengine_splash);')
                cpp('engine.RegisterObject(*logo);')
            with cpp.block('void PreScene(ArduEngine &engine)'):
                cpp('')
            with cpp.block('void Scene(ArduEngine &engine)'):
                cpp('')

            cpp.label('private')
            cpp('ArduSprite *logo;')
    cpp('')

    cpp('\n#endif')
    cpp.close()

def generate_global(path):
    cpp = CppFile(path + 'Global.h')
    cpp('#ifndef GLOBAL_H')
    cpp('#define GLOBAL_H\n')

    # Includes
    cpp('#include <Arduboy2.h>')
    cpp('#include <ArduboyTones.h>')

    cpp('')

    cpp('#include "ArduEngine/ArduRect.cpp"')
    cpp('#include "ArduEngine/ArduSprite.cpp"')
    cpp('#include "ArduEngine/ArduEngine.cpp"')

    cpp('')

    cpp('#include "Images.h"')

    cpp('')

    # Declarations
    cpp('Arduboy2 arduboy;')
    cpp('ArduboyTones sound(arduboy.audio.enabled);')
    cpp('ArduEngine *arduEngine = new ArduEngine(arduboy);')

    cpp('\n#endif')
    cpp.close()

def generate_main_ino(path, game_name):
    cpp = CppFile(path + game_name + '.ino')

    cpp('#include "Global.h"\n')

    cpp('')

    cpp('#include "SplashScreen.cpp"')

    cpp('')

    cpp('SplashScreen *splashScreen;')

    with cpp.block('void InitializeScenes()'):
        cpp('// TODO: Add example scene here')
        cpp('splashScreen = new SplashScreen(*arduEngine);')
        cpp('arduEngine->RegisterScene(*splashScreen);')

    cpp('')
    with cpp.block('void setup()'):
        cpp('arduboy.begin();')
        cpp('arduboy.setFrameRate(60);')
        cpp('arduboy.initRandomSeed();\n')
        cpp('Serial.begin(9600);')
        cpp('InitializeScenes();')

    cpp('')
    with cpp.block('void loop()'):
        cpp('Serial.println("count");')
        cpp('if (!(arduboy.nextFrame())) return;')
        cpp('arduboy.pollButtons();')
        cpp('arduboy.clear();\n')
        cpp('arduEngine->Update(arduboy);\n')
        cpp('arduboy.display();')

    cpp.close()

def generate_image_file(path):
    cpp = CppFile(path + 'Images.h')

    cpp('#ifndef IMAGES_H')
    cpp('#define IMAGES_H\n')

    cpp("const unsigned char arduengine_splash[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0x60, 0x20, 0x30, 0x30, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x10, 0x10, 0x30, 0x60, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1c, 0x6, 0x43, 0xa1, 0x50, 0x00, 0xf8, 0xc, 0x6, 0x23, 0x11, 0xc9, 0xc8, 0xc8, 0x00, 0x00, 0x00, 0xc8, 0xc9, 0xc9, 0x13, 0x26, 0xc, 0xf8, 0x00, 0x3, 0xe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1f, 0xf0, 0x81, 0x2, 0x21, 0xf0, 0x23, 0x66, 0xcc, 0x98, 0xf0, 0x1, 0x1, 0xe1, 0x8, 0xc, 0xe0, 0x1, 0x1, 0xf1, 0x98, 0xcc, 0x46, 0x63, 0x30, 0x18, 0xc, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x7, 0x4, 0x4, 0x7, 0x4, 0x4, 0x7, 0x4, 0x4, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1, 0x1, 0x79, 0x49, 0x9, 0x9, 0xff, 0x00, 0x00, 0xff, 0x1, 0x1, 0x95, 0x11, 0x11, 0xff, 0x00, 0x00, 0xcf, 0x49, 0x79, 0x1, 0x1, 0x79, 0x49, 0xcf, 0x00, 0x00, 0xff, 0x1, 0x3, 0xe6, 0x44, 0xe6, 0x3, 0x1, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1, 0x1, 0xc1, 0x49, 0x41, 0x41, 0x7f, 0x00, 0x00, 0xff, 0x1, 0x1, 0x95, 0x11, 0x11, 0xff, 0x00, 0x00, 0xff, 0x1, 0x1, 0x79, 0x79, 0x1, 0x1, 0xff, 0x00, 0x00, 0xff, 0x41, 0x41, 0x49, 0x9, 0x9, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x00, 0x00, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x00, 0x00, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x00, 0x00, 0x3, 0x2, 0x2, 0x3, 0x00, 0x3, 0x2, 0x2, 0x3, 0x00, 0x00, 0x00, 0x00, 0x3, 0x2, 0x2, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x00, 0x00, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x00, 0x00, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};")

    cpp('\n#endif')
    cpp.close()



def create_new_game(game_name):
    if os.path.isdir(game_name):
        print ('{0} is already exist'.format(game_name))
    else:
        print ('Create folder {0}...'.format(game_name))
        os.mkdir(game_name)
        print ('Generate .ino file for {0}...'.format(game_name))
        generate_main_ino(game_name + '/', game_name)
        print ('Generate Global file...')
        generate_global(game_name + '/')
        print ('Copying ArduEngine library into {0}...'.format(game_name))
        copy_tree("ArduEngine", game_name + "/ArduEngine")
        print ('Add Sample Splash Screen Scene')
        generate_game_scene(game_name + '/', 'SplashScreen')
        generate_image_file(game_name + '/')
        print ('{0} is ready to develop!'.format(game_name))

# add_game_scene('MainMenu')
# generate_main_ino('GameSomething')
create_new_game(sys.argv[1])
# generate_game_scene('Scene');
